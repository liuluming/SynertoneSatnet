// Project information
buildDir = 'bin'
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
       // google()
        maven{url 'https://maven.google.com'}
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        //google()
        maven{url 'https://maven.google.com'}
    }
}

configurations {
    javadocDeps
}

apply plugin: 'com.android.library'

dependencies {
    implementation group: 'org.apache.commons', name: 'commons-compress', version: '+'
    javadocDeps group: 'org.apache.commons', name: 'commons-compress', version: '+'
}

def submoduleDir = ['submodules/mediastreamer2/java/src',
                    'submodules/linphone/java/j2se',
                    'submodules/linphone/java/common',
                    'submodules/linphone/java/impl',
                    'submodules/linphone/coreapi/help/examples/java']


def excludePackage = []

excludePackage.add('**/gdb.*')
excludePackage.add('**/libopenh264**')
excludePackage.add('**/**tester**')
excludePackage.add('**/LICENSE.txt')

android {
    defaultConfig {
        compileSdkVersion 27
        buildToolsVersion "27.0.3"
        multiDexEnabled true
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifestLibrary.xml'
            java.srcDirs = submoduleDir
            resources.srcDirs = submoduleDir
            aidl.srcDirs = submoduleDir
            renderscript.srcDirs = submoduleDir
            jniLibs.srcDirs = ['libs']

            java.excludes = ['**/mediastream/MediastreamerActivity.java']

            // Exclude some useless files
            packagingOptions {
                excludes = excludePackage
            }
        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

///////////// Task /////////////

task(releaseJavadoc, type: Javadoc, dependsOn: "assembleRelease") {
    source = submoduleDir
    excludes = ['**/mediastream/MediastreamerActivity.java',
                '**/**.html',
                '**/**.aidl']
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += files(android.libraryVariants.release.javaCompile.classpath.files)
    classpath += configurations.javadocDeps
    options.encoding = 'UTF-8'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocsJar(type: Jar, dependsOn: releaseJavadoc) {
    classifier = 'javadoc'
    from releaseJavadoc.destinationDir
}

task sdkZip(type: Zip) {
    String appName = "liblinphone-android-sdk"
    String gitSha = 'git describe --always'.execute().text.trim()
    String newSdkName = appName + "-" + gitSha + ".zip"

    from('bin/libs',
         'bin/outputs/aar')
    include '*'
    archiveName newSdkName
}
